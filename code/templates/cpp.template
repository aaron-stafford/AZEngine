#include "${CLASS_NAME}.h"
#include "AZ.h"

#define CALL_MEMBER_FN(object,ptrToMember)  ((object).*(ptrToMember))

// States
${STATE_METHODS_DEFINITIONS}

// Transition methods
${TRANSITION_METHODS_DEFINITIONS}

// Initialization of state machine
void ${CLASS_NAME}::AZInit()
{
  // Populate hashtable
  // ${TABLE_INSERTIONS_START}
  // ${TABLE_INSERTIONS_END}
  
  // Set initial state
  // ${INITIAL_STATE_START}
  // ${INITIAL_STATE_END}

  // Populate debug input index
  // ${POPULATE_DEBUG_INPUT_INDEX_START}
  // ${POPULATE_DEBUG_INPUT_INDEX_END}

  // Populate debug state index
  // ${POPULATE_DEBUG_STATE_INDEX_START}
  // ${POPULATE_DEBUG_STATE_INDEX_END}
}

${CLASS_NAME}::${CLASS_NAME}()
{
  stateMachine = new AZStateMachine();
  AZInit();
}

${CLASS_NAME}::~${CLASS_NAME}()
{
  delete stateMachine;
}

void ${CLASS_NAME}::AZExecuteCurrentState()
{
  while(CALL_MEMBER_FN(*this, m_CurrentInfo.stateMethod) ())
    ;
}

void ${CLASS_NAME}::AZProcessInput(int input)
{
  transition_info_t newState = stateMachine.GetNextState(0, m_CurrentState, a_Input);

  if(newState.stateIndex >= 0)
  { 
    m_PreviousState = m_CurrentState;
    m_CurrentState = newState.stateIndex;
    m_PreviousInfo = m_CurrentInfo;
    m_CurrentInfo = newState;
  }
}
